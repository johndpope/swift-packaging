#!/usr/bin/perl

use strict;
use warnings;
use JSON::XS;
use File::Find;
use Getopt::Long;

my $format = '%s';
my $separator = ' ';
GetOptions(
	'C|chdir=s' => sub { chdir $_[1] },
	'printf=s'  => \$format,
	'F=s'       => \$separator,
);

chdir $ARGV[0] if @ARGV;

my %modules;

my $package = decode_json(`swift package dump-package`);
my %exclude = map { $_ => 1 } @{$package->{exclude}};

sub module_name {
	my ($dir) = @_;
	if ($dir =~ m#^Sources/([^/]+)#) {
		return $1;
	} elsif ($dir eq 'Sources') {
		return $package->{name};
	} else {
		die "Unexpected";
	}
}

find(sub {
	if ($exclude{$File::Find::dir}) {
	} elsif ($_ eq 'main.swift') {
		$modules{module_name($File::Find::dir)}{swift}{executable} = 1;
	} elsif (/\.swift$/) {
		$modules{module_name($File::Find::dir)}{swift} ||= {};
	} elsif (/^main\.(c|m|mm|cc|cpp|cxx)$/) {
		$modules{module_name($File::Find::dir)}{clang}{executable} = 1;
	} elsif (/\.(c|m|mm|cc|cpp|cxx)$/) {
		$modules{module_name($File::Find::dir)}{clang} ||= {};
	}
}, 'Sources');

my @result;
foreach (@ARGV) {
	my ($lang, $type) = split /-/;
	if ($type eq 'library') {
		push @result, grep { $modules{$_}{$lang} && !$modules{$_}{$lang}{executable} } keys %modules;
	} elsif ($type eq 'executable') {
		push @result, grep { $modules{$_}{$lang}{executable} } keys %modules;
	}
}

print join($separator, map sprintf($format, $_), @result) . "\n";
